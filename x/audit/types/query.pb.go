// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errata/audit/v1beta/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryProtocolRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryProtocolRequest) Reset()         { *m = QueryProtocolRequest{} }
func (m *QueryProtocolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProtocolRequest) ProtoMessage()    {}
func (*QueryProtocolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234d621cefdfcc1, []int{0}
}
func (m *QueryProtocolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProtocolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProtocolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProtocolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProtocolRequest.Merge(m, src)
}
func (m *QueryProtocolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProtocolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProtocolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProtocolRequest proto.InternalMessageInfo

type QueryProtocolResponse struct {
	Title       string                                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SourceCode  string                                  `protobuf:"bytes,3,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`
	ProjectHome string                                  `protobuf:"bytes,4,opt,name=project_home,json=projectHome,proto3" json:"project_home,omitempty"`
	Category    string                                  `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	AttackPool  *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=attack_pool,json=attackPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"attack_pool,omitempty"`
	DefensePool *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=defense_pool,json=defensePool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"defense_pool,omitempty"`
}

func (m *QueryProtocolResponse) Reset()         { *m = QueryProtocolResponse{} }
func (m *QueryProtocolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProtocolResponse) ProtoMessage()    {}
func (*QueryProtocolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234d621cefdfcc1, []int{1}
}
func (m *QueryProtocolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProtocolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProtocolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProtocolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProtocolResponse.Merge(m, src)
}
func (m *QueryProtocolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProtocolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProtocolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProtocolResponse proto.InternalMessageInfo

func (m *QueryProtocolResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *QueryProtocolResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *QueryProtocolResponse) GetSourceCode() string {
	if m != nil {
		return m.SourceCode
	}
	return ""
}

func (m *QueryProtocolResponse) GetProjectHome() string {
	if m != nil {
		return m.ProjectHome
	}
	return ""
}

func (m *QueryProtocolResponse) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type QueryProtocolsRequest struct {
}

func (m *QueryProtocolsRequest) Reset()         { *m = QueryProtocolsRequest{} }
func (m *QueryProtocolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProtocolsRequest) ProtoMessage()    {}
func (*QueryProtocolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234d621cefdfcc1, []int{2}
}
func (m *QueryProtocolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProtocolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProtocolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProtocolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProtocolsRequest.Merge(m, src)
}
func (m *QueryProtocolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProtocolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProtocolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProtocolsRequest proto.InternalMessageInfo

type QueryProtocolsResponse struct {
	Protocol []*Protocol `protobuf:"bytes,1,rep,name=Protocol,proto3" json:"Protocol,omitempty"`
}

func (m *QueryProtocolsResponse) Reset()         { *m = QueryProtocolsResponse{} }
func (m *QueryProtocolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProtocolsResponse) ProtoMessage()    {}
func (*QueryProtocolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a234d621cefdfcc1, []int{3}
}
func (m *QueryProtocolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProtocolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProtocolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProtocolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProtocolsResponse.Merge(m, src)
}
func (m *QueryProtocolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProtocolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProtocolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProtocolsResponse proto.InternalMessageInfo

func (m *QueryProtocolsResponse) GetProtocol() []*Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryProtocolRequest)(nil), "errata.audit.v1beta1.QueryProtocolRequest")
	proto.RegisterType((*QueryProtocolResponse)(nil), "errata.audit.v1beta1.QueryProtocolResponse")
	proto.RegisterType((*QueryProtocolsRequest)(nil), "errata.audit.v1beta1.QueryProtocolsRequest")
	proto.RegisterType((*QueryProtocolsResponse)(nil), "errata.audit.v1beta1.QueryProtocolsResponse")
}

func init() { proto.RegisterFile("errata/audit/v1beta/query.proto", fileDescriptor_a234d621cefdfcc1) }

var fileDescriptor_a234d621cefdfcc1 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0x63, 0xb7, 0xe9, 0x97, 0x6e, 0xaa, 0xef, 0xb0, 0x0a, 0x60, 0x59, 0xc8, 0x4e, 0x7d,
	0x28, 0xa5, 0x80, 0x97, 0x94, 0x5b, 0x8f, 0xed, 0x05, 0x84, 0x90, 0x4a, 0xc4, 0x89, 0x4b, 0xb4,
	0xb1, 0x07, 0xd7, 0xd4, 0xf6, 0xb8, 0xde, 0x75, 0x45, 0xae, 0x9c, 0x90, 0x38, 0x80, 0xc4, 0x0b,
	0xf4, 0xc6, 0xab, 0x20, 0x71, 0xa9, 0xc4, 0x05, 0x71, 0x40, 0x28, 0xe1, 0xc0, 0x63, 0x20, 0xef,
	0x3a, 0xa1, 0x8a, 0x2c, 0x14, 0x4e, 0xc9, 0xce, 0xfc, 0xe7, 0x37, 0x7f, 0xcf, 0x0c, 0x71, 0xa1,
	0x28, 0xb8, 0xe4, 0x8c, 0x97, 0x61, 0x2c, 0xd9, 0xf9, 0x60, 0x0c, 0x92, 0xb3, 0xb3, 0x12, 0x8a,
	0x89, 0x9f, 0x17, 0x28, 0x91, 0xf6, 0xb4, 0xc0, 0x57, 0x02, 0x5f, 0x0b, 0x06, 0x76, 0x2f, 0xc2,
	0x08, 0x95, 0x80, 0x55, 0xff, 0xb4, 0xd6, 0xbe, 0x19, 0x21, 0x46, 0x09, 0x30, 0x9e, 0xc7, 0x8c,
	0x67, 0x19, 0x4a, 0x2e, 0x63, 0xcc, 0x44, 0x9d, 0x6d, 0x6c, 0xa5, 0xb1, 0x4a, 0xe0, 0xdd, 0x27,
	0xbd, 0xa7, 0x55, 0xe7, 0xe3, 0xea, 0x15, 0x60, 0x32, 0x84, 0xb3, 0x12, 0x84, 0xa4, 0xff, 0x13,
	0x33, 0x0e, 0x2d, 0xa3, 0x6f, 0xec, 0xae, 0x0f, 0xcd, 0x38, 0x3c, 0xe8, 0xbc, 0xb9, 0x70, 0x5b,
	0xbf, 0x2e, 0xdc, 0x96, 0xf7, 0xd9, 0x24, 0xd7, 0x96, 0x4a, 0x44, 0x8e, 0x99, 0x00, 0xda, 0x23,
	0x6d, 0x19, 0xcb, 0x04, 0x54, 0xd9, 0xe6, 0x50, 0x3f, 0x68, 0x9f, 0x74, 0x43, 0x10, 0x41, 0x11,
	0xe7, 0x95, 0x31, 0xcb, 0x54, 0xb9, 0xab, 0x21, 0xea, 0x92, 0xae, 0xc0, 0xb2, 0x08, 0x60, 0x14,
	0x60, 0x08, 0xd6, 0x9a, 0x52, 0x10, 0x1d, 0x3a, 0xc2, 0x10, 0xe8, 0x36, 0xd9, 0xca, 0x0b, 0x7c,
	0x09, 0x81, 0x1c, 0x9d, 0x60, 0x0a, 0xd6, 0xba, 0x66, 0xd4, 0xb1, 0x87, 0x98, 0x02, 0xb5, 0x49,
	0x27, 0xe0, 0x12, 0x22, 0x2c, 0x26, 0x56, 0x5b, 0xa5, 0x17, 0x6f, 0xfa, 0x98, 0x74, 0xb9, 0x94,
	0x3c, 0x38, 0x1d, 0xe5, 0x88, 0x89, 0xb5, 0x51, 0xa5, 0x0f, 0xf7, 0xbe, 0x7d, 0x77, 0x77, 0xa2,
	0x58, 0x9e, 0x94, 0x63, 0x3f, 0xc0, 0x94, 0x05, 0x28, 0x52, 0x14, 0xf5, 0xcf, 0x3d, 0x11, 0x9e,
	0x32, 0x39, 0xc9, 0x41, 0xf8, 0x8f, 0x32, 0x39, 0x24, 0xba, 0xfc, 0x18, 0x31, 0xa1, 0x4f, 0xc8,
	0x56, 0x08, 0x2f, 0x20, 0x13, 0xa0, 0x69, 0xff, 0xfd, 0x33, 0xad, 0x5b, 0xd7, 0x57, 0x38, 0xef,
	0xc6, 0xd2, 0x30, 0x45, 0xbd, 0x00, 0xef, 0x19, 0xb9, 0xbe, 0x9c, 0xa8, 0xc7, 0x7c, 0x40, 0x3a,
	0xf3, 0xa0, 0x65, 0xf4, 0xd7, 0x76, 0xbb, 0xfb, 0x8e, 0xdf, 0x74, 0x30, 0xfe, 0x62, 0x41, 0x0b,
	0xfd, 0xfe, 0x47, 0x93, 0xb4, 0x15, 0x96, 0xbe, 0x35, 0xfe, 0x60, 0xe8, 0x5e, 0x33, 0xa0, 0xe9,
	0x32, 0xec, 0x3b, 0x2b, 0x69, 0xb5, 0x57, 0x6f, 0xe7, 0xf5, 0x97, 0x9f, 0x1f, 0xcc, 0x3e, 0x75,
	0x58, 0xc3, 0x21, 0x0e, 0x58, 0x3e, 0x37, 0xf0, 0xce, 0x20, 0x9b, 0x8b, 0x2f, 0xa5, 0xab, 0xb4,
	0x98, 0x0f, 0xca, 0xbe, 0xbb, 0x9a, 0xb8, 0x36, 0x74, 0x4b, 0x19, 0xda, 0xa6, 0xee, 0xdf, 0x0d,
	0x89, 0xc3, 0xa3, 0x4f, 0x53, 0xc7, 0xb8, 0x9c, 0x3a, 0xc6, 0x8f, 0xa9, 0x63, 0xbc, 0x9f, 0x39,
	0xad, 0xcb, 0x99, 0xd3, 0xfa, 0x3a, 0x73, 0x5a, 0xcf, 0x6f, 0x5f, 0xd9, 0x73, 0xca, 0xa5, 0x3c,
	0x87, 0x42, 0xc0, 0x1c, 0xf7, 0xaa, 0x06, 0xaa, 0x75, 0x8f, 0x37, 0x14, 0xef, 0xc1, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xa5, 0x61, 0xa7, 0xd0, 0xf2, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Protocol(ctx context.Context, in *QueryProtocolRequest, opts ...grpc.CallOption) (*QueryProtocolResponse, error)
	Protocols(ctx context.Context, in *QueryProtocolsRequest, opts ...grpc.CallOption) (*QueryProtocolsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Protocol(ctx context.Context, in *QueryProtocolRequest, opts ...grpc.CallOption) (*QueryProtocolResponse, error) {
	out := new(QueryProtocolResponse)
	err := c.cc.Invoke(ctx, "/errata.audit.v1beta1.Query/Protocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Protocols(ctx context.Context, in *QueryProtocolsRequest, opts ...grpc.CallOption) (*QueryProtocolsResponse, error) {
	out := new(QueryProtocolsResponse)
	err := c.cc.Invoke(ctx, "/errata.audit.v1beta1.Query/Protocols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Protocol(context.Context, *QueryProtocolRequest) (*QueryProtocolResponse, error)
	Protocols(context.Context, *QueryProtocolsRequest) (*QueryProtocolsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Protocol(ctx context.Context, req *QueryProtocolRequest) (*QueryProtocolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Protocol not implemented")
}
func (*UnimplementedQueryServer) Protocols(ctx context.Context, req *QueryProtocolsRequest) (*QueryProtocolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Protocols not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Protocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Protocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errata.audit.v1beta1.Query/Protocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Protocol(ctx, req.(*QueryProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Protocols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProtocolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Protocols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errata.audit.v1beta1.Query/Protocols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Protocols(ctx, req.(*QueryProtocolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "errata.audit.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Protocol",
			Handler:    _Query_Protocol_Handler,
		},
		{
			MethodName: "Protocols",
			Handler:    _Query_Protocols_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "errata/audit/v1beta/query.proto",
}

func (m *QueryProtocolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProtocolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProtocolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProtocolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProtocolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProtocolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefensePool != nil {
		{
			size := m.DefensePool.Size()
			i -= size
			if _, err := m.DefensePool.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.AttackPool != nil {
		{
			size := m.AttackPool.Size()
			i -= size
			if _, err := m.AttackPool.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProjectHome) > 0 {
		i -= len(m.ProjectHome)
		copy(dAtA[i:], m.ProjectHome)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProjectHome)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceCode) > 0 {
		i -= len(m.SourceCode)
		copy(dAtA[i:], m.SourceCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProtocolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProtocolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProtocolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryProtocolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProtocolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProtocolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		for iNdEx := len(m.Protocol) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Protocol[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryProtocolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryProtocolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SourceCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ProjectHome)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AttackPool != nil {
		l = m.AttackPool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DefensePool != nil {
		l = m.DefensePool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProtocolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryProtocolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		for _, e := range m.Protocol {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryProtocolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProtocolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProtocolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProtocolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProtocolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProtocolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectHome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectHome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.AttackPool = &v
			if err := m.AttackPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefensePool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.DefensePool = &v
			if err := m.DefensePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProtocolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProtocolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProtocolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProtocolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProtocolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProtocolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = append(m.Protocol, &Protocol{})
			if err := m.Protocol[len(m.Protocol)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
